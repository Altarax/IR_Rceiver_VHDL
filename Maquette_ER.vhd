
--=======================================================
--  This code is generated by Terasic System Builder
--=======================================================
library ieee;
use ieee.std_logic_1164.all ;

library work;
use work.vhdl_pack.all;


entity Maquette_ER is
	port (

			--//////////// CLOCK //////////
			CLOCK_50, CLOCK2_50, CLOCK3_50 	:	in		std_logic ;

			--//////////// LED //////////
			LEDG										:	out	std_logic_vector(8 downto 0) ;
			LEDR										:	out	std_logic_vector(17 downto 0) ;

			--//////////// KEY //////////
			KEY										:	in		std_logic_vector(3 downto 0) ;

			--//////////// SW //////////
			SW											:	in		std_logic_vector(17 downto 0) ;

			--//////////// SEG7 //////////
			HEX0,	HEX1,	HEX2,	HEX3,	HEX4,	HEX5,	HEX6,	HEX7 : out	std_logic_vector(6 downto 0) ;

			--//////////// LCD //////////
			LCD_BLON, LCD_EN,	LCD_ON, LCD_RS, LCD_RW : out std_logic ;
			LCD_DATA									:	inout	std_logic_vector(7 downto 0) ;

			--//////////// SDCARD //////////
			SD_CLK									:	out 	std_logic ;
			SD_CMD									:	inout std_logic ;
			SD_DAT									:	inout std_logic_vector(3 downto 0) ;
			SD_WP_N									:	in 	std_logic ;

			--//////////// VGA //////////
			VGA_B, VGA_G, VGA_R					:	out	std_logic_vector(7 downto 0) ;
			VGA_BLANK_N, VGA_CLK					:	out	std_logic ;
			VGA_HS, VGA_SYNC_N, VGA_VS			:	out	std_logic ;

			--//////////// Audio //////////
			AUD_ADCDAT								:	in		std_logic ;
			AUD_ADCLRCK, AUD_BCLK, AUD_DACLRCK : inout std_logic ;
			AUD_DACDAT, AUD_XCK					:	out	std_logic ;

			--//////////// I2C for Audio HSMC  //////////
			I2C_SCLK									:	out	std_logic ;
			I2C_SDAT									:	inout	std_logic ;

			--//////////// IR Receiver //////////
			IRDA_RXD									:	in 	std_logic ;

			--//////////// SRAM //////////
			SRAM_ADDR								:	out	std_logic_vector(19 downto 0) ;
			SRAM_DQ									:	inout std_logic_vector(15 downto 0) ;
			SRAM_CE_N, SRAM_LB_N, SRAM_OE_N	:	out	std_logic ;
			SRAM_UB_N, SRAM_WE_N					:	out	std_logic ;

			--//////////// GPIO, GPIO connect to GPIO Default //////////
			GPIO										:	inout std_logic_vector(35 downto 0) ;

			--//////////// HSMC, HSMC connect to HSMC Expansion - 3.3V //////////
			HSMC_CLKIN0, HSMC_CLKIN_N1, HSMC_CLKIN_P1	:	in 	std_logic ;
			HSMC_CLKIN_N2, HSMC_CLKIN_P2		:	in 	std_logic ;
			HSMC_CLKOUT_N1, HSMC_CLKOUT_P1, HSMC_CLKOUT0	:	inout	std_logic ;
			HSMC_CLKOUT_N2, HSMC_CLKOUT_P2	:	inout	std_logic ;
			HSMC_D									:	inout std_logic_vector(3 downto 0) ;
			HSMC_RX_D_N								:	inout std_logic_vector(16 downto 0) ;
			HSMC_RX_D_P								:	inout std_logic_vector(16 downto 0) ;
			HSMC_TX_D_N								:	inout std_logic_vector(16 downto 0) ;
			HSMC_TX_D_P								:	inout std_logic_vector(16 downto 0) 
			) ;
end entity Maquette_ER ;

architecture synth of Maquette_ER is

	component pll
		port
		(
			inclk0		: IN std_logic  := '0';
			c0		: OUT std_logic 
		);
	end component;
	
	
	component bintobcd_10bits IS
	PORT (	
		ck 			:	IN  STD_LOGIC;
		arazb 		:  IN  STD_LOGIC;
		binary		:	IN  STD_LOGIC_VECTOR(9 downto 0);
		
		BCD_uni		:  OUT  STD_LOGIC_VECTOR(3 downto 0);
		BCD_diz		:  OUT  STD_LOGIC_VECTOR(3 downto 0);
		BCD_cen		:  OUT  STD_LOGIC_VECTOR(3 downto 0)
		);
	end component bintobcd_10bits;

	component deco7seg IS 
		PORT
		(
		-- Entrees
			E 			:  	IN  STD_LOGIC_VECTOR(3 downto 0);
			comp			:		IN  STD_LOGIC;
		-- Sorties	
			Segm		:		OUT STD_LOGIC_VECTOR(6 downto 0)	
		);
	END component;
	
    component Recept_trame_IRDA_2Mhz is
        Port (
            
            clk_2Mhz    : in std_logic;
            arazb       : in std_logic;
            IRDA        : in std_logic;

            Mot_32bits  : inout std_logic_vector(31 downto 0);
            Recept      : out std_logic;
            new_touche  : out std_logic     

        );
    
    end component;
	

	signal clk_2Mhz : std_logic ;
	signal Mot_32bits_s : std_logic_vector(31 downto 0);

begin

	recept_tram: Recept_trame_IRDA_2Mhz
		port map(
            clk_2Mhz => clk_2Mhz,
            arazb => Sw(0),
            IRDA => IRDA_RXD,
            Mot_32bits => Mot_32bits_s,
            Recept => GPIO(0),
            new_touche => GPIO(2)
		);


	deco1: deco7seg
		port map(
			E => Mot_32bits_s(3 downto 0),
			comp => '1',
			Segm => HEX0
		);
		
	deco2: deco7seg
		port map(
			E => Mot_32bits_s(7 downto 4),
			comp => '1',
			Segm => HEX1
		);
		
	deco3: deco7seg
		port map(
			E => Mot_32bits_s(11 downto 8),
			comp => '1',
			Segm => HEX2
		);
		
	deco4: deco7seg
		port map(
			E => Mot_32bits_s(15 downto 12),
			comp => '1',
			Segm => HEX3
		);
		
	deco5: deco7seg
		port map(
			E => Mot_32bits_s(19 downto 16),
			comp => '1',
			Segm => HEX4
		);
		
	deco6: deco7seg
		port map(
			E => Mot_32bits_s(23 downto 20),
			comp => '1',
			Segm => HEX5
		);

	deco7: deco7seg
		port map(
			E => Mot_32bits_s(27 downto 24),
			comp => '1',
			Segm => HEX6
		);
		
	deco8: deco7seg
		port map(
			E => Mot_32bits_s(31 downto 28),
			comp => '1',
			Segm => HEX7
		);
		
			

-- connexions par defaut à modifier si nécessaire
	ledr <= sw ;
	ledG(8 downto 1) <= (others => '0') ;

	
-- En commentaire car inutilisés
--	hex0 <= (others => '1') ;
--	hex1 <= (others => '1') ;
--	hex2 <= (others => '1') ;
--	hex3 <= (others => '1') ;
--	hex4 <= (others => '1') ;
--	hex5 <= (others => '1') ;
--	hex6 <= (others => '1') ;
--	hex7 <= (others => '1') ;
	

-- NE PAS MODIFIER CE QUI SUIT !	
	
-- instanciation pll
	pll_inst : pll port map (
			inclk0	 => CLOCK_50,
			c0	 => clk_2Mhz
		);
	

end ;

